# Generate private key for CA
openssl genrsa -out proxy_ca.key 4096

# Create self sign certificate
openssl req -x509 -new -nodes \
  -key proxy_ca.key \
  -sha256 -days 3650 \
  -out proxy_ca.crt \
  -subj "/C=SG/ST=Singapore/L=Singapore/O=MyCompany/OU=Proxy/CN=MyCompany Proxy CA"

#Verify it is a CA
openssl x509 -in proxy_ca.crt -text -noout | grep -A2 "Basic Constraints"
---> CA:TRUE

# Create ca.conf
[ req ]
default_bits        = 4096
prompt              = no
default_md          = sha256
x509_extensions     = v3_ca
distinguished_name  = dn

[ dn ]
C  = SG
ST = Singapore
L  = Singapore
O  = MyCompany
OU = ForwardProxy
CN = MyCompany Forward Proxy CA

[ v3_ca ]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
basicConstraints = critical,CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

# Generate CA
openssl req -x509 -new -nodes \
  -config ca.conf \
  -keyout proxy_ca.key \
  -out proxy_ca.crt \
  -days 3650

#Install CA on F5
tmsh install sys crypto key proxy_ca.key from-local-file /var/tmp/proxy_ca.key
tmsh install sys crypto cert proxy_ca.crt from-local-file /var/tmp/proxy_ca.crt

#Create datagroup for whitelist
tmsh create ltm data-group internal whitelist_sites type string records add { \
    "www.google.com" { data "198.51.100.20" } \
    "www.example.com" { data "198.51.100.30" } \
}

#iRule to filter website from datagroup
when CLIENT_DATA {
    if {[TCP::payload] starts_with "CONNECT"} {
        if {[regexp {CONNECT ([^:]+):([0-9]+)} [TCP::payload] -> host port]} {
            set host [string tolower $host]
            
            # Liste des ports autorisés (ex: HTTPS standard + alternative)
            set allowed_ports [list 443 8443]

            # Vérifie si le host est dans le Data Group et le port autorisé
            if {[class match -value $host equals whitelist_sites] && [lsearch -exact $allowed_ports $port] >= 0} {
                # Récupère l'IP NAT correspondante
                set dest_ip [class lookup $host whitelist_sites]

                # Confirme la connexion au client
                TCP::respond "HTTP/1.1 200 Connection established\r\n\r\n"
                TCP::release

                # Redirige vers l'IP NAT
                node $dest_ip $port
            } else {
                log local0. "Proxy: site ou port refusé -> $host:$port"
                TCP::respond "HTTP/1.1 403 Forbidden\r\n\r\n"
                TCP::close
            }
        }
    }
}

#Client ssl profile with CA to sign cert
tmsh create ltm profile client-ssl clientssl_forwardproxy \
    defaults-from clientssl \
    cert-key-chain add { proxyCA { cert /Common/proxy_ca.crt key /Common/proxy_ca.key } } \
    proxy-ca-cert /Common/proxy_ca.crt \
    proxy-ca-key /Common/proxy_ca.key \
    forward-proxy enabled \
    forward-proxy-bypass disabled

#Server ssl profile
tmsh create ltm profile server-ssl serverssl_forwardproxy defaults-from serverssl

#VS explicit forward proxy
tmsh create ltm virtual vs_explicit_proxy {
    destination 10.1.1.10:8080
    ip-protocol tcp
    source 0.0.0.0/0
    profiles add { clientssl_forwardproxy { context clientside } serverssl_forwardproxy { context serverside } tcp }
    source-address-translation { type automap }
    rules { irule_whitelist_static }
}
